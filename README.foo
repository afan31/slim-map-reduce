Author: Abhijeet Sharma, Deepen Mehta, Akshay Raje and Afan Ahmad Khan

DESCRIPTION
Our program implements Distributed Sort in a server-client system. Our program consist of 1 Server and multiple Client nodes(sort nodes).The Server and each sort node runs on individual EC2 instances, and the Server issues sort tasks to each data nodes. The objective of the program is do a sort on the "Dry Bulb Temp" from the given data set.

1. DIRECTORY STRUCTURE AND LIST OF FILES:
    Unzip Sharma_Mehta_Raje_Khan_A9.tar.gz. This folder contains the following files -

    * has to be set by user manually before run
    + is created by the Program during execution

    |Sharma_Mehta_Raje_Khan_A9
        |README.md                          (Description of the Submission)
        |Assignment9_Report.pdf             (PDF Report of the project results)
        |Assignment9_Report.Rmd             (Rmd file for the Report)
        |pom.xml                            (Configuration file for Maven project including dependencies)
        |automate.sh                        (Shell script to automate creation and destruction of your cluster as well as execution and timing of sort jobs)
        |checkJobSuccess.sh                 (Keeps checking for _SUCCESS file in S3 bucket)
        |src
          |main
            |java
              |com
                |aws
                  |AWSManager.java            (Contains information to connect to AWS and handle all request to S3)
                |main
                  |ConfigParams.java          (Contains configuration parmaters and 'main' function)
                  |Configuration.java
                |net
                  |SortClient.java            (These are the classes for server and client nodes and the communication |SortClientHandler.java      between them)
                  |SortClientInitializer.java
                  |SortServer.java
                  |SortServerHandler.java
                  |SortServerInitializer.java
                |sort
                  |SampleSort.java            (These classes contain the information of Distributed Sort algorithm)
                  |TemperatureInfo.java
                |utils
                  |CombineFiles.java           (This class contain the utility methods)
        |target+
            |Files and folders for packaging JAR+
        |output+
            |Files and folders from AWS S3+

2. SYSTEM SPECIFICATION & REQUIREMENTS:
    1. OSX or Unix/Linux machine with 8GB RAM
    2. Java 1.8
    3. Apache Maven 3.3
    4. Pandoc (https://github.com/jgm/pandoc/releases/tag/1.16.0.2)
    5. R with following packages:
        5.1 rmarkdown

3. STEPS TO RUN (Note: Make sure all files/subfolders are present as mentioned in #1 before running):
    1. Open automate.sh in a text editor.
      1.1 For key_name variable give the name of your key-pair file without the .pem extension.
      1.2 Change the security_group variable to your security group.
      1.3 In the key_location variable give the full path to the key-pair file including the .pem extension.
      1.4 Change the outputBucketName variable to the name of your S3 bucket. Make sure that this S3 bucket is empty before continuing.
    2. To start the EC2 instances and run the sort program -
        bash automate.sh start N (Change N to the number of slave instances excluding the master instance)
        Example: bash automate.sh start 2 -- will create 1 master and 2 slave EC2 instances
    3. Once the sorting completes and you get a "Job Complete" message, you can stop the running instances using -
        bash automate.sh stop